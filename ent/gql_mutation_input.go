// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateSocialInput represents a mutation input for creating socials.
type CreateSocialInput struct {
	CreatedBy *int64
	UpdatedBy *int64
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	Name      *string
	Type      int32
	EmailID   int64
	WechatID  int64
}

// Mutate applies the CreateSocialInput on the SocialMutation builder.
func (i *CreateSocialInput) Mutate(m *SocialMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	m.SetType(i.Type)
	m.SetEmailID(i.EmailID)
	m.SetWechatID(i.WechatID)
}

// SetInput applies the change-set in the CreateSocialInput on the SocialCreate builder.
func (c *SocialCreate) SetInput(i CreateSocialInput) *SocialCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSocialInput represents a mutation input for updating socials.
type UpdateSocialInput struct {
	CreatedBy   *int64
	UpdatedBy   *int64
	UpdatedAt   *time.Time
	DeletedAt   *time.Time
	Name        *string
	Type        *int32
	ClearEmail  bool
	EmailID     *int64
	ClearWechat bool
	WechatID    *int64
}

// Mutate applies the UpdateSocialInput on the SocialMutation builder.
func (i *UpdateSocialInput) Mutate(m *SocialMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.EmailID; v != nil {
		m.SetEmailID(*v)
	}
	if i.ClearWechat {
		m.ClearWechat()
	}
	if v := i.WechatID; v != nil {
		m.SetWechatID(*v)
	}
}

// SetInput applies the change-set in the UpdateSocialInput on the SocialUpdate builder.
func (c *SocialUpdate) SetInput(i UpdateSocialInput) *SocialUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSocialInput on the SocialUpdateOne builder.
func (c *SocialUpdateOne) SetInput(i UpdateSocialInput) *SocialUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedBy *int64
	UpdatedBy *int64
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	Name      *string
	Password  string
	Phone     string
	ObjectIDs []int64
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	m.SetPassword(i.Password)
	m.SetPhone(i.Phone)
	if v := i.ObjectIDs; len(v) > 0 {
		m.AddObjectIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	CreatedBy       *int64
	UpdatedBy       *int64
	UpdatedAt       *time.Time
	DeletedAt       *time.Time
	Name            *string
	Password        *string
	Phone           *string
	AddObjectIDs    []int64
	RemoveObjectIDs []int64
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.AddObjectIDs; len(v) > 0 {
		m.AddObjectIDs(v...)
	}
	if v := i.RemoveObjectIDs; len(v) > 0 {
		m.RemoveObjectIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
