// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"drive/ent/email"
	"drive/ent/predicate"
	"drive/ent/social"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmailUpdate is the builder for updating Email entities.
type EmailUpdate struct {
	config
	hooks    []Hook
	mutation *EmailMutation
}

// Where appends a list predicates to the EmailUpdate builder.
func (eu *EmailUpdate) Where(ps ...predicate.Email) *EmailUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetCreatedBy sets the "created_by" field.
func (eu *EmailUpdate) SetCreatedBy(i int64) *EmailUpdate {
	eu.mutation.ResetCreatedBy()
	eu.mutation.SetCreatedBy(i)
	return eu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableCreatedBy(i *int64) *EmailUpdate {
	if i != nil {
		eu.SetCreatedBy(*i)
	}
	return eu
}

// AddCreatedBy adds i to the "created_by" field.
func (eu *EmailUpdate) AddCreatedBy(i int64) *EmailUpdate {
	eu.mutation.AddCreatedBy(i)
	return eu
}

// SetUpdatedBy sets the "updated_by" field.
func (eu *EmailUpdate) SetUpdatedBy(i int64) *EmailUpdate {
	eu.mutation.ResetUpdatedBy()
	eu.mutation.SetUpdatedBy(i)
	return eu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableUpdatedBy(i *int64) *EmailUpdate {
	if i != nil {
		eu.SetUpdatedBy(*i)
	}
	return eu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (eu *EmailUpdate) AddUpdatedBy(i int64) *EmailUpdate {
	eu.mutation.AddUpdatedBy(i)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EmailUpdate) SetUpdatedAt(t time.Time) *EmailUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EmailUpdate) SetDeletedAt(t time.Time) *EmailUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableDeletedAt(t *time.Time) *EmailUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// SetName sets the "name" field.
func (eu *EmailUpdate) SetName(s string) *EmailUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableName(s *string) *EmailUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// AddSocialIDs adds the "socials" edge to the Social entity by IDs.
func (eu *EmailUpdate) AddSocialIDs(ids ...int64) *EmailUpdate {
	eu.mutation.AddSocialIDs(ids...)
	return eu
}

// AddSocials adds the "socials" edges to the Social entity.
func (eu *EmailUpdate) AddSocials(s ...*Social) *EmailUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddSocialIDs(ids...)
}

// Mutation returns the EmailMutation object of the builder.
func (eu *EmailUpdate) Mutation() *EmailMutation {
	return eu.mutation
}

// ClearSocials clears all "socials" edges to the Social entity.
func (eu *EmailUpdate) ClearSocials() *EmailUpdate {
	eu.mutation.ClearSocials()
	return eu
}

// RemoveSocialIDs removes the "socials" edge to Social entities by IDs.
func (eu *EmailUpdate) RemoveSocialIDs(ids ...int64) *EmailUpdate {
	eu.mutation.RemoveSocialIDs(ids...)
	return eu
}

// RemoveSocials removes "socials" edges to Social entities.
func (eu *EmailUpdate) RemoveSocials(s ...*Social) *EmailUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveSocialIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eu.defaults()
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmailUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmailUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmailUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EmailUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := email.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

func (eu *EmailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   email.Table,
			Columns: email.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: email.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.CreatedBy(); ok {
		_spec.SetField(email.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(email.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.UpdatedBy(); ok {
		_spec.SetField(email.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(email.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(email.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(email.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(email.FieldName, field.TypeString, value)
	}
	if eu.mutation.SocialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   email.SocialsTable,
			Columns: []string{email.SocialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: social.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedSocialsIDs(); len(nodes) > 0 && !eu.mutation.SocialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   email.SocialsTable,
			Columns: []string{email.SocialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: social.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SocialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   email.SocialsTable,
			Columns: []string{email.SocialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: social.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{email.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EmailUpdateOne is the builder for updating a single Email entity.
type EmailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailMutation
}

// SetCreatedBy sets the "created_by" field.
func (euo *EmailUpdateOne) SetCreatedBy(i int64) *EmailUpdateOne {
	euo.mutation.ResetCreatedBy()
	euo.mutation.SetCreatedBy(i)
	return euo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableCreatedBy(i *int64) *EmailUpdateOne {
	if i != nil {
		euo.SetCreatedBy(*i)
	}
	return euo
}

// AddCreatedBy adds i to the "created_by" field.
func (euo *EmailUpdateOne) AddCreatedBy(i int64) *EmailUpdateOne {
	euo.mutation.AddCreatedBy(i)
	return euo
}

// SetUpdatedBy sets the "updated_by" field.
func (euo *EmailUpdateOne) SetUpdatedBy(i int64) *EmailUpdateOne {
	euo.mutation.ResetUpdatedBy()
	euo.mutation.SetUpdatedBy(i)
	return euo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableUpdatedBy(i *int64) *EmailUpdateOne {
	if i != nil {
		euo.SetUpdatedBy(*i)
	}
	return euo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (euo *EmailUpdateOne) AddUpdatedBy(i int64) *EmailUpdateOne {
	euo.mutation.AddUpdatedBy(i)
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EmailUpdateOne) SetUpdatedAt(t time.Time) *EmailUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EmailUpdateOne) SetDeletedAt(t time.Time) *EmailUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableDeletedAt(t *time.Time) *EmailUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// SetName sets the "name" field.
func (euo *EmailUpdateOne) SetName(s string) *EmailUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableName(s *string) *EmailUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// AddSocialIDs adds the "socials" edge to the Social entity by IDs.
func (euo *EmailUpdateOne) AddSocialIDs(ids ...int64) *EmailUpdateOne {
	euo.mutation.AddSocialIDs(ids...)
	return euo
}

// AddSocials adds the "socials" edges to the Social entity.
func (euo *EmailUpdateOne) AddSocials(s ...*Social) *EmailUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddSocialIDs(ids...)
}

// Mutation returns the EmailMutation object of the builder.
func (euo *EmailUpdateOne) Mutation() *EmailMutation {
	return euo.mutation
}

// ClearSocials clears all "socials" edges to the Social entity.
func (euo *EmailUpdateOne) ClearSocials() *EmailUpdateOne {
	euo.mutation.ClearSocials()
	return euo
}

// RemoveSocialIDs removes the "socials" edge to Social entities by IDs.
func (euo *EmailUpdateOne) RemoveSocialIDs(ids ...int64) *EmailUpdateOne {
	euo.mutation.RemoveSocialIDs(ids...)
	return euo
}

// RemoveSocials removes "socials" edges to Social entities.
func (euo *EmailUpdateOne) RemoveSocials(s ...*Social) *EmailUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveSocialIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmailUpdateOne) Select(field string, fields ...string) *EmailUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Email entity.
func (euo *EmailUpdateOne) Save(ctx context.Context) (*Email, error) {
	var (
		err  error
		node *Email
	)
	euo.defaults()
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Email)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EmailMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmailUpdateOne) SaveX(ctx context.Context) *Email {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmailUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmailUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EmailUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := email.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

func (euo *EmailUpdateOne) sqlSave(ctx context.Context) (_node *Email, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   email.Table,
			Columns: email.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: email.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Email.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, email.FieldID)
		for _, f := range fields {
			if !email.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != email.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.CreatedBy(); ok {
		_spec.SetField(email.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(email.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.UpdatedBy(); ok {
		_spec.SetField(email.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(email.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(email.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(email.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(email.FieldName, field.TypeString, value)
	}
	if euo.mutation.SocialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   email.SocialsTable,
			Columns: []string{email.SocialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: social.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedSocialsIDs(); len(nodes) > 0 && !euo.mutation.SocialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   email.SocialsTable,
			Columns: []string{email.SocialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: social.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SocialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   email.SocialsTable,
			Columns: []string{email.SocialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: social.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Email{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{email.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
