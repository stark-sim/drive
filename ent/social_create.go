// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"drive/ent/email"
	"drive/ent/social"
	"drive/ent/wechat"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SocialCreate is the builder for creating a Social entity.
type SocialCreate struct {
	config
	mutation *SocialMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (sc *SocialCreate) SetCreatedBy(i int64) *SocialCreate {
	sc.mutation.SetCreatedBy(i)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *SocialCreate) SetNillableCreatedBy(i *int64) *SocialCreate {
	if i != nil {
		sc.SetCreatedBy(*i)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SocialCreate) SetUpdatedBy(i int64) *SocialCreate {
	sc.mutation.SetUpdatedBy(i)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *SocialCreate) SetNillableUpdatedBy(i *int64) *SocialCreate {
	if i != nil {
		sc.SetUpdatedBy(*i)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SocialCreate) SetCreatedAt(t time.Time) *SocialCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SocialCreate) SetNillableCreatedAt(t *time.Time) *SocialCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SocialCreate) SetUpdatedAt(t time.Time) *SocialCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SocialCreate) SetNillableUpdatedAt(t *time.Time) *SocialCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SocialCreate) SetDeletedAt(t time.Time) *SocialCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SocialCreate) SetNillableDeletedAt(t *time.Time) *SocialCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SocialCreate) SetName(s string) *SocialCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *SocialCreate) SetNillableName(s *string) *SocialCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetRelationID sets the "relation_id" field.
func (sc *SocialCreate) SetRelationID(i int64) *SocialCreate {
	sc.mutation.SetRelationID(i)
	return sc
}

// SetType sets the "type" field.
func (sc *SocialCreate) SetType(i int32) *SocialCreate {
	sc.mutation.SetType(i)
	return sc
}

// SetID sets the "id" field.
func (sc *SocialCreate) SetID(i int64) *SocialCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SocialCreate) SetNillableID(i *int64) *SocialCreate {
	if i != nil {
		sc.SetID(*i)
	}
	return sc
}

// SetEmailID sets the "email" edge to the Email entity by ID.
func (sc *SocialCreate) SetEmailID(id int64) *SocialCreate {
	sc.mutation.SetEmailID(id)
	return sc
}

// SetEmail sets the "email" edge to the Email entity.
func (sc *SocialCreate) SetEmail(e *Email) *SocialCreate {
	return sc.SetEmailID(e.ID)
}

// SetWechatID sets the "wechat" edge to the Wechat entity by ID.
func (sc *SocialCreate) SetWechatID(id int64) *SocialCreate {
	sc.mutation.SetWechatID(id)
	return sc
}

// SetWechat sets the "wechat" edge to the Wechat entity.
func (sc *SocialCreate) SetWechat(w *Wechat) *SocialCreate {
	return sc.SetWechatID(w.ID)
}

// Mutation returns the SocialMutation object of the builder.
func (sc *SocialCreate) Mutation() *SocialMutation {
	return sc.mutation
}

// Save creates the Social in the database.
func (sc *SocialCreate) Save(ctx context.Context) (*Social, error) {
	var (
		err  error
		node *Social
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SocialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Social)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SocialMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SocialCreate) SaveX(ctx context.Context) *Social {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SocialCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SocialCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SocialCreate) defaults() {
	if _, ok := sc.mutation.CreatedBy(); !ok {
		v := social.DefaultCreatedBy
		sc.mutation.SetCreatedBy(v)
	}
	if _, ok := sc.mutation.UpdatedBy(); !ok {
		v := social.DefaultUpdatedBy
		sc.mutation.SetUpdatedBy(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := social.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := social.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		v := social.DefaultDeletedAt
		sc.mutation.SetDeletedAt(v)
	}
	if _, ok := sc.mutation.Name(); !ok {
		v := social.DefaultName
		sc.mutation.SetName(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := social.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SocialCreate) check() error {
	if _, ok := sc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Social.created_by"`)}
	}
	if _, ok := sc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Social.updated_by"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Social.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Social.updated_at"`)}
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Social.deleted_at"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Social.name"`)}
	}
	if _, ok := sc.mutation.RelationID(); !ok {
		return &ValidationError{Name: "relation_id", err: errors.New(`ent: missing required field "Social.relation_id"`)}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Social.type"`)}
	}
	if _, ok := sc.mutation.EmailID(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required edge "Social.email"`)}
	}
	if _, ok := sc.mutation.WechatID(); !ok {
		return &ValidationError{Name: "wechat", err: errors.New(`ent: missing required edge "Social.wechat"`)}
	}
	return nil
}

func (sc *SocialCreate) sqlSave(ctx context.Context) (*Social, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (sc *SocialCreate) createSpec() (*Social, *sqlgraph.CreateSpec) {
	var (
		_node = &Social{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: social.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: social.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(social.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(social.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(social.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(social.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(social.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(social.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(social.FieldType, field.TypeInt32, value)
		_node.Type = value
	}
	if nodes := sc.mutation.EmailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   social.EmailTable,
			Columns: []string{social.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: email.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RelationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.WechatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   social.WechatTable,
			Columns: []string{social.WechatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: wechat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RelationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SocialCreateBulk is the builder for creating many Social entities in bulk.
type SocialCreateBulk struct {
	config
	builders []*SocialCreate
}

// Save creates the Social entities in the database.
func (scb *SocialCreateBulk) Save(ctx context.Context) ([]*Social, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Social, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SocialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SocialCreateBulk) SaveX(ctx context.Context) []*Social {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SocialCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SocialCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
