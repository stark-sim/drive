// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"drive/ent/migrate"

	"drive/ent/directory"
	"drive/ent/email"
	"drive/ent/object"
	"drive/ent/social"
	"drive/ent/user"
	"drive/ent/wechat"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Directory is the client for interacting with the Directory builders.
	Directory *DirectoryClient
	// Email is the client for interacting with the Email builders.
	Email *EmailClient
	// Object is the client for interacting with the Object builders.
	Object *ObjectClient
	// Social is the client for interacting with the Social builders.
	Social *SocialClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Wechat is the client for interacting with the Wechat builders.
	Wechat *WechatClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Directory = NewDirectoryClient(c.config)
	c.Email = NewEmailClient(c.config)
	c.Object = NewObjectClient(c.config)
	c.Social = NewSocialClient(c.config)
	c.User = NewUserClient(c.config)
	c.Wechat = NewWechatClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Directory: NewDirectoryClient(cfg),
		Email:     NewEmailClient(cfg),
		Object:    NewObjectClient(cfg),
		Social:    NewSocialClient(cfg),
		User:      NewUserClient(cfg),
		Wechat:    NewWechatClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Directory: NewDirectoryClient(cfg),
		Email:     NewEmailClient(cfg),
		Object:    NewObjectClient(cfg),
		Social:    NewSocialClient(cfg),
		User:      NewUserClient(cfg),
		Wechat:    NewWechatClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Directory.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Directory.Use(hooks...)
	c.Email.Use(hooks...)
	c.Object.Use(hooks...)
	c.Social.Use(hooks...)
	c.User.Use(hooks...)
	c.Wechat.Use(hooks...)
}

// DirectoryClient is a client for the Directory schema.
type DirectoryClient struct {
	config
}

// NewDirectoryClient returns a client for the Directory from the given config.
func NewDirectoryClient(c config) *DirectoryClient {
	return &DirectoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `directory.Hooks(f(g(h())))`.
func (c *DirectoryClient) Use(hooks ...Hook) {
	c.hooks.Directory = append(c.hooks.Directory, hooks...)
}

// Create returns a builder for creating a Directory entity.
func (c *DirectoryClient) Create() *DirectoryCreate {
	mutation := newDirectoryMutation(c.config, OpCreate)
	return &DirectoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Directory entities.
func (c *DirectoryClient) CreateBulk(builders ...*DirectoryCreate) *DirectoryCreateBulk {
	return &DirectoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Directory.
func (c *DirectoryClient) Update() *DirectoryUpdate {
	mutation := newDirectoryMutation(c.config, OpUpdate)
	return &DirectoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DirectoryClient) UpdateOne(d *Directory) *DirectoryUpdateOne {
	mutation := newDirectoryMutation(c.config, OpUpdateOne, withDirectory(d))
	return &DirectoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DirectoryClient) UpdateOneID(id int64) *DirectoryUpdateOne {
	mutation := newDirectoryMutation(c.config, OpUpdateOne, withDirectoryID(id))
	return &DirectoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Directory.
func (c *DirectoryClient) Delete() *DirectoryDelete {
	mutation := newDirectoryMutation(c.config, OpDelete)
	return &DirectoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DirectoryClient) DeleteOne(d *Directory) *DirectoryDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DirectoryClient) DeleteOneID(id int64) *DirectoryDeleteOne {
	builder := c.Delete().Where(directory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DirectoryDeleteOne{builder}
}

// Query returns a query builder for Directory.
func (c *DirectoryClient) Query() *DirectoryQuery {
	return &DirectoryQuery{
		config: c.config,
	}
}

// Get returns a Directory entity by its id.
func (c *DirectoryClient) Get(ctx context.Context, id int64) (*Directory, error) {
	return c.Query().Where(directory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DirectoryClient) GetX(ctx context.Context, id int64) *Directory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryObjects queries the objects edge of a Directory.
func (c *DirectoryClient) QueryObjects(d *Directory) *ObjectQuery {
	query := &ObjectQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(directory.Table, directory.FieldID, id),
			sqlgraph.To(object.Table, object.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, directory.ObjectsTable, directory.ObjectsColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Directory.
func (c *DirectoryClient) QueryParent(d *Directory) *DirectoryQuery {
	query := &DirectoryQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(directory.Table, directory.FieldID, id),
			sqlgraph.To(directory.Table, directory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, directory.ParentTable, directory.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Directory.
func (c *DirectoryClient) QueryChildren(d *Directory) *DirectoryQuery {
	query := &DirectoryQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(directory.Table, directory.FieldID, id),
			sqlgraph.To(directory.Table, directory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, directory.ChildrenTable, directory.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DirectoryClient) Hooks() []Hook {
	return c.hooks.Directory
}

// EmailClient is a client for the Email schema.
type EmailClient struct {
	config
}

// NewEmailClient returns a client for the Email from the given config.
func NewEmailClient(c config) *EmailClient {
	return &EmailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `email.Hooks(f(g(h())))`.
func (c *EmailClient) Use(hooks ...Hook) {
	c.hooks.Email = append(c.hooks.Email, hooks...)
}

// Create returns a builder for creating a Email entity.
func (c *EmailClient) Create() *EmailCreate {
	mutation := newEmailMutation(c.config, OpCreate)
	return &EmailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Email entities.
func (c *EmailClient) CreateBulk(builders ...*EmailCreate) *EmailCreateBulk {
	return &EmailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Email.
func (c *EmailClient) Update() *EmailUpdate {
	mutation := newEmailMutation(c.config, OpUpdate)
	return &EmailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailClient) UpdateOne(e *Email) *EmailUpdateOne {
	mutation := newEmailMutation(c.config, OpUpdateOne, withEmail(e))
	return &EmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailClient) UpdateOneID(id int64) *EmailUpdateOne {
	mutation := newEmailMutation(c.config, OpUpdateOne, withEmailID(id))
	return &EmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Email.
func (c *EmailClient) Delete() *EmailDelete {
	mutation := newEmailMutation(c.config, OpDelete)
	return &EmailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailClient) DeleteOne(e *Email) *EmailDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailClient) DeleteOneID(id int64) *EmailDeleteOne {
	builder := c.Delete().Where(email.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailDeleteOne{builder}
}

// Query returns a query builder for Email.
func (c *EmailClient) Query() *EmailQuery {
	return &EmailQuery{
		config: c.config,
	}
}

// Get returns a Email entity by its id.
func (c *EmailClient) Get(ctx context.Context, id int64) (*Email, error) {
	return c.Query().Where(email.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailClient) GetX(ctx context.Context, id int64) *Email {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySocials queries the socials edge of a Email.
func (c *EmailClient) QuerySocials(e *Email) *SocialQuery {
	query := &SocialQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(email.Table, email.FieldID, id),
			sqlgraph.To(social.Table, social.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, email.SocialsTable, email.SocialsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailClient) Hooks() []Hook {
	return c.hooks.Email
}

// ObjectClient is a client for the Object schema.
type ObjectClient struct {
	config
}

// NewObjectClient returns a client for the Object from the given config.
func NewObjectClient(c config) *ObjectClient {
	return &ObjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `object.Hooks(f(g(h())))`.
func (c *ObjectClient) Use(hooks ...Hook) {
	c.hooks.Object = append(c.hooks.Object, hooks...)
}

// Create returns a builder for creating a Object entity.
func (c *ObjectClient) Create() *ObjectCreate {
	mutation := newObjectMutation(c.config, OpCreate)
	return &ObjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Object entities.
func (c *ObjectClient) CreateBulk(builders ...*ObjectCreate) *ObjectCreateBulk {
	return &ObjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Object.
func (c *ObjectClient) Update() *ObjectUpdate {
	mutation := newObjectMutation(c.config, OpUpdate)
	return &ObjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ObjectClient) UpdateOne(o *Object) *ObjectUpdateOne {
	mutation := newObjectMutation(c.config, OpUpdateOne, withObject(o))
	return &ObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ObjectClient) UpdateOneID(id int64) *ObjectUpdateOne {
	mutation := newObjectMutation(c.config, OpUpdateOne, withObjectID(id))
	return &ObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Object.
func (c *ObjectClient) Delete() *ObjectDelete {
	mutation := newObjectMutation(c.config, OpDelete)
	return &ObjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ObjectClient) DeleteOne(o *Object) *ObjectDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ObjectClient) DeleteOneID(id int64) *ObjectDeleteOne {
	builder := c.Delete().Where(object.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ObjectDeleteOne{builder}
}

// Query returns a query builder for Object.
func (c *ObjectClient) Query() *ObjectQuery {
	return &ObjectQuery{
		config: c.config,
	}
}

// Get returns a Object entity by its id.
func (c *ObjectClient) Get(ctx context.Context, id int64) (*Object, error) {
	return c.Query().Where(object.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ObjectClient) GetX(ctx context.Context, id int64) *Object {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Object.
func (c *ObjectClient) QueryUser(o *Object) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(object.Table, object.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, object.UserTable, object.UserColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDirectory queries the directory edge of a Object.
func (c *ObjectClient) QueryDirectory(o *Object) *DirectoryQuery {
	query := &DirectoryQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(object.Table, object.FieldID, id),
			sqlgraph.To(directory.Table, directory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, object.DirectoryTable, object.DirectoryColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ObjectClient) Hooks() []Hook {
	return c.hooks.Object
}

// SocialClient is a client for the Social schema.
type SocialClient struct {
	config
}

// NewSocialClient returns a client for the Social from the given config.
func NewSocialClient(c config) *SocialClient {
	return &SocialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `social.Hooks(f(g(h())))`.
func (c *SocialClient) Use(hooks ...Hook) {
	c.hooks.Social = append(c.hooks.Social, hooks...)
}

// Create returns a builder for creating a Social entity.
func (c *SocialClient) Create() *SocialCreate {
	mutation := newSocialMutation(c.config, OpCreate)
	return &SocialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Social entities.
func (c *SocialClient) CreateBulk(builders ...*SocialCreate) *SocialCreateBulk {
	return &SocialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Social.
func (c *SocialClient) Update() *SocialUpdate {
	mutation := newSocialMutation(c.config, OpUpdate)
	return &SocialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SocialClient) UpdateOne(s *Social) *SocialUpdateOne {
	mutation := newSocialMutation(c.config, OpUpdateOne, withSocial(s))
	return &SocialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SocialClient) UpdateOneID(id int64) *SocialUpdateOne {
	mutation := newSocialMutation(c.config, OpUpdateOne, withSocialID(id))
	return &SocialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Social.
func (c *SocialClient) Delete() *SocialDelete {
	mutation := newSocialMutation(c.config, OpDelete)
	return &SocialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SocialClient) DeleteOne(s *Social) *SocialDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SocialClient) DeleteOneID(id int64) *SocialDeleteOne {
	builder := c.Delete().Where(social.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SocialDeleteOne{builder}
}

// Query returns a query builder for Social.
func (c *SocialClient) Query() *SocialQuery {
	return &SocialQuery{
		config: c.config,
	}
}

// Get returns a Social entity by its id.
func (c *SocialClient) Get(ctx context.Context, id int64) (*Social, error) {
	return c.Query().Where(social.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SocialClient) GetX(ctx context.Context, id int64) *Social {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmail queries the email edge of a Social.
func (c *SocialClient) QueryEmail(s *Social) *EmailQuery {
	query := &EmailQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(social.Table, social.FieldID, id),
			sqlgraph.To(email.Table, email.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, social.EmailTable, social.EmailColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWechat queries the wechat edge of a Social.
func (c *SocialClient) QueryWechat(s *Social) *WechatQuery {
	query := &WechatQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(social.Table, social.FieldID, id),
			sqlgraph.To(wechat.Table, wechat.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, social.WechatTable, social.WechatColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SocialClient) Hooks() []Hook {
	return c.hooks.Social
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryObjects queries the objects edge of a User.
func (c *UserClient) QueryObjects(u *User) *ObjectQuery {
	query := &ObjectQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(object.Table, object.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ObjectsTable, user.ObjectsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// WechatClient is a client for the Wechat schema.
type WechatClient struct {
	config
}

// NewWechatClient returns a client for the Wechat from the given config.
func NewWechatClient(c config) *WechatClient {
	return &WechatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `wechat.Hooks(f(g(h())))`.
func (c *WechatClient) Use(hooks ...Hook) {
	c.hooks.Wechat = append(c.hooks.Wechat, hooks...)
}

// Create returns a builder for creating a Wechat entity.
func (c *WechatClient) Create() *WechatCreate {
	mutation := newWechatMutation(c.config, OpCreate)
	return &WechatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Wechat entities.
func (c *WechatClient) CreateBulk(builders ...*WechatCreate) *WechatCreateBulk {
	return &WechatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Wechat.
func (c *WechatClient) Update() *WechatUpdate {
	mutation := newWechatMutation(c.config, OpUpdate)
	return &WechatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WechatClient) UpdateOne(w *Wechat) *WechatUpdateOne {
	mutation := newWechatMutation(c.config, OpUpdateOne, withWechat(w))
	return &WechatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WechatClient) UpdateOneID(id int64) *WechatUpdateOne {
	mutation := newWechatMutation(c.config, OpUpdateOne, withWechatID(id))
	return &WechatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Wechat.
func (c *WechatClient) Delete() *WechatDelete {
	mutation := newWechatMutation(c.config, OpDelete)
	return &WechatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WechatClient) DeleteOne(w *Wechat) *WechatDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WechatClient) DeleteOneID(id int64) *WechatDeleteOne {
	builder := c.Delete().Where(wechat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WechatDeleteOne{builder}
}

// Query returns a query builder for Wechat.
func (c *WechatClient) Query() *WechatQuery {
	return &WechatQuery{
		config: c.config,
	}
}

// Get returns a Wechat entity by its id.
func (c *WechatClient) Get(ctx context.Context, id int64) (*Wechat, error) {
	return c.Query().Where(wechat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WechatClient) GetX(ctx context.Context, id int64) *Wechat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySocials queries the socials edge of a Wechat.
func (c *WechatClient) QuerySocials(w *Wechat) *SocialQuery {
	query := &SocialQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(wechat.Table, wechat.FieldID, id),
			sqlgraph.To(social.Table, social.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, wechat.SocialsTable, wechat.SocialsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WechatClient) Hooks() []Hook {
	return c.hooks.Wechat
}
