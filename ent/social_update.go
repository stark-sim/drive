// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"drive/ent/email"
	"drive/ent/predicate"
	"drive/ent/social"
	"drive/ent/wechat"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SocialUpdate is the builder for updating Social entities.
type SocialUpdate struct {
	config
	hooks    []Hook
	mutation *SocialMutation
}

// Where appends a list predicates to the SocialUpdate builder.
func (su *SocialUpdate) Where(ps ...predicate.Social) *SocialUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *SocialUpdate) SetCreatedBy(i int64) *SocialUpdate {
	su.mutation.ResetCreatedBy()
	su.mutation.SetCreatedBy(i)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *SocialUpdate) SetNillableCreatedBy(i *int64) *SocialUpdate {
	if i != nil {
		su.SetCreatedBy(*i)
	}
	return su
}

// AddCreatedBy adds i to the "created_by" field.
func (su *SocialUpdate) AddCreatedBy(i int64) *SocialUpdate {
	su.mutation.AddCreatedBy(i)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SocialUpdate) SetUpdatedBy(i int64) *SocialUpdate {
	su.mutation.ResetUpdatedBy()
	su.mutation.SetUpdatedBy(i)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SocialUpdate) SetNillableUpdatedBy(i *int64) *SocialUpdate {
	if i != nil {
		su.SetUpdatedBy(*i)
	}
	return su
}

// AddUpdatedBy adds i to the "updated_by" field.
func (su *SocialUpdate) AddUpdatedBy(i int64) *SocialUpdate {
	su.mutation.AddUpdatedBy(i)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SocialUpdate) SetUpdatedAt(t time.Time) *SocialUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SocialUpdate) SetDeletedAt(t time.Time) *SocialUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SocialUpdate) SetNillableDeletedAt(t *time.Time) *SocialUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// SetName sets the "name" field.
func (su *SocialUpdate) SetName(s string) *SocialUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SocialUpdate) SetNillableName(s *string) *SocialUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetRelationID sets the "relation_id" field.
func (su *SocialUpdate) SetRelationID(i int64) *SocialUpdate {
	su.mutation.SetRelationID(i)
	return su
}

// SetType sets the "type" field.
func (su *SocialUpdate) SetType(i int32) *SocialUpdate {
	su.mutation.ResetType()
	su.mutation.SetType(i)
	return su
}

// AddType adds i to the "type" field.
func (su *SocialUpdate) AddType(i int32) *SocialUpdate {
	su.mutation.AddType(i)
	return su
}

// SetEmailID sets the "email" edge to the Email entity by ID.
func (su *SocialUpdate) SetEmailID(id int64) *SocialUpdate {
	su.mutation.SetEmailID(id)
	return su
}

// SetEmail sets the "email" edge to the Email entity.
func (su *SocialUpdate) SetEmail(e *Email) *SocialUpdate {
	return su.SetEmailID(e.ID)
}

// SetWechatID sets the "wechat" edge to the Wechat entity by ID.
func (su *SocialUpdate) SetWechatID(id int64) *SocialUpdate {
	su.mutation.SetWechatID(id)
	return su
}

// SetWechat sets the "wechat" edge to the Wechat entity.
func (su *SocialUpdate) SetWechat(w *Wechat) *SocialUpdate {
	return su.SetWechatID(w.ID)
}

// Mutation returns the SocialMutation object of the builder.
func (su *SocialUpdate) Mutation() *SocialMutation {
	return su.mutation
}

// ClearEmail clears the "email" edge to the Email entity.
func (su *SocialUpdate) ClearEmail() *SocialUpdate {
	su.mutation.ClearEmail()
	return su
}

// ClearWechat clears the "wechat" edge to the Wechat entity.
func (su *SocialUpdate) ClearWechat() *SocialUpdate {
	su.mutation.ClearWechat()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SocialUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SocialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SocialUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SocialUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SocialUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SocialUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := social.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SocialUpdate) check() error {
	if _, ok := su.mutation.EmailID(); su.mutation.EmailCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Social.email"`)
	}
	if _, ok := su.mutation.WechatID(); su.mutation.WechatCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Social.wechat"`)
	}
	return nil
}

func (su *SocialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   social.Table,
			Columns: social.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: social.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.SetField(social.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedCreatedBy(); ok {
		_spec.AddField(social.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(social.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(social.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(social.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(social.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(social.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(social.FieldType, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedType(); ok {
		_spec.AddField(social.FieldType, field.TypeInt32, value)
	}
	if su.mutation.EmailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   social.EmailTable,
			Columns: []string{social.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: email.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EmailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   social.EmailTable,
			Columns: []string{social.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: email.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.WechatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   social.WechatTable,
			Columns: []string{social.WechatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: wechat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.WechatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   social.WechatTable,
			Columns: []string{social.WechatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: wechat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{social.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SocialUpdateOne is the builder for updating a single Social entity.
type SocialUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SocialMutation
}

// SetCreatedBy sets the "created_by" field.
func (suo *SocialUpdateOne) SetCreatedBy(i int64) *SocialUpdateOne {
	suo.mutation.ResetCreatedBy()
	suo.mutation.SetCreatedBy(i)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *SocialUpdateOne) SetNillableCreatedBy(i *int64) *SocialUpdateOne {
	if i != nil {
		suo.SetCreatedBy(*i)
	}
	return suo
}

// AddCreatedBy adds i to the "created_by" field.
func (suo *SocialUpdateOne) AddCreatedBy(i int64) *SocialUpdateOne {
	suo.mutation.AddCreatedBy(i)
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SocialUpdateOne) SetUpdatedBy(i int64) *SocialUpdateOne {
	suo.mutation.ResetUpdatedBy()
	suo.mutation.SetUpdatedBy(i)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SocialUpdateOne) SetNillableUpdatedBy(i *int64) *SocialUpdateOne {
	if i != nil {
		suo.SetUpdatedBy(*i)
	}
	return suo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (suo *SocialUpdateOne) AddUpdatedBy(i int64) *SocialUpdateOne {
	suo.mutation.AddUpdatedBy(i)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SocialUpdateOne) SetUpdatedAt(t time.Time) *SocialUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SocialUpdateOne) SetDeletedAt(t time.Time) *SocialUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SocialUpdateOne) SetNillableDeletedAt(t *time.Time) *SocialUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *SocialUpdateOne) SetName(s string) *SocialUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SocialUpdateOne) SetNillableName(s *string) *SocialUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetRelationID sets the "relation_id" field.
func (suo *SocialUpdateOne) SetRelationID(i int64) *SocialUpdateOne {
	suo.mutation.SetRelationID(i)
	return suo
}

// SetType sets the "type" field.
func (suo *SocialUpdateOne) SetType(i int32) *SocialUpdateOne {
	suo.mutation.ResetType()
	suo.mutation.SetType(i)
	return suo
}

// AddType adds i to the "type" field.
func (suo *SocialUpdateOne) AddType(i int32) *SocialUpdateOne {
	suo.mutation.AddType(i)
	return suo
}

// SetEmailID sets the "email" edge to the Email entity by ID.
func (suo *SocialUpdateOne) SetEmailID(id int64) *SocialUpdateOne {
	suo.mutation.SetEmailID(id)
	return suo
}

// SetEmail sets the "email" edge to the Email entity.
func (suo *SocialUpdateOne) SetEmail(e *Email) *SocialUpdateOne {
	return suo.SetEmailID(e.ID)
}

// SetWechatID sets the "wechat" edge to the Wechat entity by ID.
func (suo *SocialUpdateOne) SetWechatID(id int64) *SocialUpdateOne {
	suo.mutation.SetWechatID(id)
	return suo
}

// SetWechat sets the "wechat" edge to the Wechat entity.
func (suo *SocialUpdateOne) SetWechat(w *Wechat) *SocialUpdateOne {
	return suo.SetWechatID(w.ID)
}

// Mutation returns the SocialMutation object of the builder.
func (suo *SocialUpdateOne) Mutation() *SocialMutation {
	return suo.mutation
}

// ClearEmail clears the "email" edge to the Email entity.
func (suo *SocialUpdateOne) ClearEmail() *SocialUpdateOne {
	suo.mutation.ClearEmail()
	return suo
}

// ClearWechat clears the "wechat" edge to the Wechat entity.
func (suo *SocialUpdateOne) ClearWechat() *SocialUpdateOne {
	suo.mutation.ClearWechat()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SocialUpdateOne) Select(field string, fields ...string) *SocialUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Social entity.
func (suo *SocialUpdateOne) Save(ctx context.Context) (*Social, error) {
	var (
		err  error
		node *Social
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SocialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Social)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SocialMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SocialUpdateOne) SaveX(ctx context.Context) *Social {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SocialUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SocialUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SocialUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := social.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SocialUpdateOne) check() error {
	if _, ok := suo.mutation.EmailID(); suo.mutation.EmailCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Social.email"`)
	}
	if _, ok := suo.mutation.WechatID(); suo.mutation.WechatCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Social.wechat"`)
	}
	return nil
}

func (suo *SocialUpdateOne) sqlSave(ctx context.Context) (_node *Social, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   social.Table,
			Columns: social.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: social.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Social.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, social.FieldID)
		for _, f := range fields {
			if !social.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != social.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.SetField(social.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(social.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(social.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(social.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(social.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(social.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(social.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(social.FieldType, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedType(); ok {
		_spec.AddField(social.FieldType, field.TypeInt32, value)
	}
	if suo.mutation.EmailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   social.EmailTable,
			Columns: []string{social.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: email.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EmailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   social.EmailTable,
			Columns: []string{social.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: email.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.WechatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   social.WechatTable,
			Columns: []string{social.WechatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: wechat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.WechatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   social.WechatTable,
			Columns: []string{social.WechatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: wechat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Social{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{social.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
