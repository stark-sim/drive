// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (d *Directory) Objects(ctx context.Context) (result []*Object, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedObjects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.ObjectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryObjects().All(ctx)
	}
	return result, err
}

func (d *Directory) Parent(ctx context.Context) (*Directory, error) {
	result, err := d.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Directory) Children(ctx context.Context) (result []*Directory, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedChildren(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.ChildrenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryChildren().All(ctx)
	}
	return result, err
}

func (o *Object) User(ctx context.Context) (*User, error) {
	result, err := o.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryUser().Only(ctx)
	}
	return result, err
}

func (o *Object) Directory(ctx context.Context) (*Directory, error) {
	result, err := o.Edges.DirectoryOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryDirectory().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Objects(ctx context.Context) (result []*Object, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedObjects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ObjectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryObjects().All(ctx)
	}
	return result, err
}
