// Code generated by ent, DO NOT EDIT.

package ent

import (
	"drive/ent/directory"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Directory is the model entity for the Directory schema.
type Directory struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public"`
	// ParentID holds the value of the "parent_id" field.
	ParentID int64 `json:"parent_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DirectoryQuery when eager-loading is set.
	Edges DirectoryEdges `json:"edges"`
}

// DirectoryEdges holds the relations/edges for other nodes in the graph.
type DirectoryEdges struct {
	// Objects holds the value of the objects edge.
	Objects []*Object `json:"objects,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Directory `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Directory `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ObjectsOrErr returns the Objects value or an error if the edge
// was not loaded in eager-loading.
func (e DirectoryEdges) ObjectsOrErr() ([]*Object, error) {
	if e.loadedTypes[0] {
		return e.Objects, nil
	}
	return nil, &NotLoadedError{edge: "objects"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DirectoryEdges) ParentOrErr() (*Directory, error) {
	if e.loadedTypes[1] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: directory.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e DirectoryEdges) ChildrenOrErr() ([]*Directory, error) {
	if e.loadedTypes[2] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Directory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case directory.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case directory.FieldID, directory.FieldCreatedBy, directory.FieldUpdatedBy, directory.FieldParentID:
			values[i] = new(sql.NullInt64)
		case directory.FieldName:
			values[i] = new(sql.NullString)
		case directory.FieldCreatedAt, directory.FieldUpdatedAt, directory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Directory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Directory fields.
func (d *Directory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case directory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int64(value.Int64)
		case directory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				d.CreatedBy = value.Int64
			}
		case directory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				d.UpdatedBy = value.Int64
			}
		case directory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case directory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case directory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				d.DeletedAt = value.Time
			}
		case directory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case directory.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				d.IsPublic = value.Bool
			}
		case directory.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				d.ParentID = value.Int64
			}
		}
	}
	return nil
}

// QueryObjects queries the "objects" edge of the Directory entity.
func (d *Directory) QueryObjects() *ObjectQuery {
	return (&DirectoryClient{config: d.config}).QueryObjects(d)
}

// QueryParent queries the "parent" edge of the Directory entity.
func (d *Directory) QueryParent() *DirectoryQuery {
	return (&DirectoryClient{config: d.config}).QueryParent(d)
}

// QueryChildren queries the "children" edge of the Directory entity.
func (d *Directory) QueryChildren() *DirectoryQuery {
	return (&DirectoryClient{config: d.config}).QueryChildren(d)
}

// Update returns a builder for updating this Directory.
// Note that you need to call Directory.Unwrap() before calling this method if this Directory
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Directory) Update() *DirectoryUpdateOne {
	return (&DirectoryClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Directory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Directory) Unwrap() *Directory {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Directory is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Directory) String() string {
	var builder strings.Builder
	builder.WriteString("Directory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", d.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", d.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(d.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", d.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", d.ParentID))
	builder.WriteByte(')')
	return builder.String()
}

// Directories is a parsable slice of Directory.
type Directories []*Directory

func (d Directories) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
